<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd ">


	<!-- 加载数据源配置文件 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- 使用第三方的数据库连接池dbcp  可以改为c3p0,或者阿里巴巴的Druid-->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
	</bean>






	<!-- 配置SqlSessionFactoryBean(即替代MyBatisUtil工具类的作用) -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	   <!-- 加载mabatis的配置文件 -->
	   <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml" />
	   <!-- 引入数据源 -->
	   <property name="dataSource" ref="dataSource" />
	   <!-- 对应dao接口的所以mapper.xml -->
	   <property name="mapperLocations" value="classpath:com/henry/ssm/mapper/*.xml" /> 
	   <!-- 别名，也可以在SqlMapConfig.xml 文件中配置-->
       <!-- <property name="typeAliasesPackage" value="com.henry.ssm.po" />  -->
	</bean>








	 <!-- mapper接口方式开发 -->
	<!-- <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		对应的接口 <property name="mapperInterface" value="com.henry.ssm.mapper.UserMapper"></property> 
		代理类已经实现SqlSessionDaoSupport <property name="sqlSessionFactory" ref="sqlSessionFactory" 
		/> </bean> -->
	


	<!-- 每次配置mapper bean比较繁琐 使用mapper扫描器来扫描 批量生成mapper bean
	 使用时只要使用接口的首字母小写直接调用getbean获取 
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	
	     <!-- mapper 对应的接口包 -->
		 <property name="basePackage" value="com.henry.ssm.dao" /> 
	

        <!-- 注意 value 而不是 ref   这个设计有点怪 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		
	</bean>


<!-- 阿里巴巴数据源
 <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        指定连接数据库的驱动
        <property name="driverClassName" value="${jdbc.driverClass}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />

        配置初始化大小、最小、最大
        <property name="initialSize" value="3" />
        <property name="minIdle" value="3" />
        <property name="maxActive" value="20" />

        配置获取连接等待超时的时间
        <property name="maxWait" value="60000" />

        配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        配置一个连接在池中最小生存的时间，单位是毫秒
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        打开PSCache，并且指定每个连接上PSCache的大小
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" />

        配置监控统计拦截的filters，去掉后监控界面sql无法统计
        <property name="filters" value="stat" />
</bean> -->






</beans>
